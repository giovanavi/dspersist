Rótulo
 Serve para expor determinada informação ao usuário, por exemplo, dados textuais
    Label rotulo = new Label("TEXTO TESTE");

Caixa de texto
    TextField campoDeTexto = new TextField("Digite algo");

Separadores
 Separando os elementos e deixando clara a distinção entre seções que a tela pode conter.
 Por exemplo, imagine uma tela que possua um formulário com cadastro de usuário, envio de e-mails e fotos,
 tudo em apenas uma tela. Para separar tais elementos de maneira que não prejudique a usabilidade do sistema,
 o JavaFx disponibiliza uma classe separadora que serve para dividir os elementos da interface da aplicação,
 não produzindo nenhuma ação.

     Separator separadorHorizontal = new Separator(Orientation.HORIZONTAL);
     Separator separadorVertical = new Separator(Orientation.VERTICAL);

Controle deslizante
 O controle deslizante, algo bastante presente nas aplicações atuais voltadas para dispositivos móveis.
 Esse comando é usado para indicar uma faixa contínua de valores entre um determinado valor mínimo e máximo.

     Slider deslizante = new Slider();

Botão de escolha(Radio Button)
 Em determinadas situações, existem respostas predefinidas, como a escolha do sexo de uma pessoa
 (masculino ou feminino). É interessante que o sistema não deixe o usuário marcar duas opções por
 vez e não permita deixar em branco. Para isso, o JavaFx nos fornece a classe RadioButton, que permite
 que as alternativas sejam expostas, possibilitando que o usuário selecione apenas uma opção dentre todas.

    RadioButton masculino = new RadioButton("M");

    RadioButton feminino = new RadioButton("F");

Botão de escolha(Check Box)
 Existem situações em que múltiplas respostas interessam para o sistema e o usuário. Imagine o caso em que
 você deseja fazer uma pesquisa com determinada pessoa, a fim de evitar que ela descreva isso textualmente.


    CheckBox chkMoradia = new CheckBox("Mora sozinho?");

    CheckBox chkEstadoCivil = new CheckBox("É casado?");

    CheckBox chkPet = new CheckBox("Tem cachorro?");

Botão de estado
 Para a criação de botões de estado que possam ficar pressionados ou não, podemos utilizar a classe
 ToggleButton do JavaFx, que herda da classe Toggle (mesma classe pai da RadioButton). O seu funcionamento
 pode se assemelhar ao da classe RadioButton, sendo que determinadas ações podem ser implementadas ao
 pressionar um ToggleButton. No entanto, o formato visual dele é diferente de um RadioButton
 Ao instanciar o controle no seu código, notaremos que ele possui os estados “pressionado” e “não pressionado”.

    ToggleButton iniciante = new ToggleButton("Iniciante");

    ToggleButton intermediario = new ToggleButton("Intermediário");

    ToggleButton avancado = new ToggleButton("Avançado");

Botões
 Qualquer informação que as pessoas insiram em um programa, provavelmente deve ser enviada e/ou armazenada
 em determinado local. Por serem importantes, os dados necessitam ser bem guardados. Para isso, o usuário
 deve dar o passo inicial, que é confirmar que deseja enviar esses dados. Por esse motivo, é interessante
 que haja um botão de confirmação ou cancelamento, para que o usuário possa pressioná-lo após sua decisão

    Button confirmar = new Button("Confirmar");

    Button cancelar = new Button("Cancelar");

Caixa de seleção
 O JavaFx também disponibiliza a famosa lista suspensa, aquela que comumente aparece em vários aplicativos
 móveis e também em páginas web, o que é bem útil quando se deseja obter apenas uma única resposta do usuário
 dentre um conjunto predefinido, por exemplo, quando queremos saber o esporte favorito de uma pessoa.

    ComboBox cbEsportes = new ComboBox();

 O nome da classe é ComboBox. Para que ela funcione como o exemplo, é interessante que você também tenha um
 vetor de Strings para que elas sejam exibidas como opções. Note:

    String esportes[] = { "Futebol", "Vôlei", "Basquete", "Muay Thai", "Balé" };

